

CC = g++
LD = g++
CFLAGS = -Wall -std=c++1y -Wno-sign-compare -Wno-unused-variable -Wno-strict-aliasing -Wl,--stack,16000000

ifdef DATA_DIR
	CFLAGS += -DDATA_DIR=\"$(DATA_DIR)\"
endif

ifdef DEBUG
GFLAG += -g
endif

NO_OMIT_FP = true

ifdef NO_OMIT_FP
GFLAG += -fno-omit-frame-pointer
endif

ifdef PROF
GFLAG += -pg
endif

ifdef RELEASE
GFLAG += -DRELEASE
endif

ifdef AMD64
GFLAG += -DAMD64
endif

ifdef OPT
GFLAG += -O2
endif


ifndef OPTFLAGS
	OPTFLAGS = -Winvalid-pch -DWINDOWS $(GFLAG)
endif

OBJDIR = obj
NAME = keeper

ROOT = ./
TOROOT = ./../
IPATH = -I. -I./extern

CFLAGS += $(IPATH)

SRCS = $(shell ls -t *.cpp)

ifdef AMD64
RES_FILE=keeper.res
else
RES_FILE=keeper32.res
endif

LIBS = -mwindows ${RES_FILE} -lvorbisfile -lvorbis -logg -lSDL2_image -lkernel32 -luser32 -lgdi32 -lcomdlg32 -lole32 -ldinput -lddraw -ldxguid -lwinmm -ldsound -lpsapi -lgdiplus -lshlwapi -luuid

ifdef AMD64
LIBS += -lmingw32 -lSDL2main -lSDL2 -lfreeglut -lglu32 -lz -lglew32 -ljpeg -lopenal -lopengl32 -lcurl -limagehlp -lpthread
else
LIBS += -lSDL2 -lSDL2main  -lglut -lglu32 -lz -ljpeg -lopenal -lopengl32 -lcurl -limagehlp -l pthread
endif

ifdef debug
	CFLAGS += -g
	OBJDIR := ${addsuffix -d,$(OBJDIR)}
	NAME := ${addsuffix -d,$(NAME)}
else
	CFLAGS += $(OPTFLAGS)
endif


OBJS = $(addprefix $(OBJDIR)/,$(SRCS:.cpp=.o))
DEPS = $(addprefix $(OBJDIR)/,$(SRCS:.cpp=.d))

##############################################################################

all:
	@$(MAKE) -f Makefile-win --no-print-directory info
	bash ./gen_version.sh
	@$(MAKE) -f Makefile-win --no-print-directory compile

compile: gen_version $(NAME)

stdafx.h.gch: stdafx.h $(wildcard *.h)
	$(CC) -MMD $(CFLAGS) -c $< -o $@

$(OBJDIR)/%.o: %.cpp
	$(CC) -MMD $(CFLAGS) -c $< -o $@

$(NAME): $(OBJS) $(OBJDIR)/main.o
	$(LD) $(CFLAGS) -o $@ $^ $(LIBS)

test: $(OBJS) $(OBJDIR)/test.o
	$(LD) $(CFLAGS) -o $@ $^ $(LIBS)

gen_version:
	bash ./gen_version.sh

info:
	@$(CC) -v 2>&1 | head -n 2
clean:
	$(RM) $(OBJDIR)/*.o
	$(RM) $(OBJDIR)/*.d
	$(RM) $(NAME)
	$(RM) stdafx.h.gch

-include $(DEPS)
